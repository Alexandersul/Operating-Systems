/*Sa se implementeze un program C, folosind apeluri sistem si functii de
biblioteca, care se apeleaza sub forma:  ./executabil nume_director intrare1
 intrare2 … //doar asta a ramas din cerinta "ne facut" ca nu mai stiu cum se ruleaza si daca e bine cu argumentele si daca
            //nu am folosit bibleoteci excesiv
*/
#include <stdlib.h>
#include <stdio.h>
#include <errno.h>
#include<sys/types.h>
#include<sys/stat.h>
#include <fcntl.h>
#include <dirent.h>
#include <string.h>
#include <unistd.h>

pid_t pid1;
pid_t pid2;
struct stat path_stat;
int c1;
int c2;
struct sigaction process_action;
int k;

void copil1()
{
    memset(&process_action,0x00,sizeof(struct sigaction));
    process_action.sa_handler=child_handler1;
    if(sigaction(SIGUSR1,&process_action,NULL)<0)
    {
        perror("Error FIU 1 SIGUSR1\n");
        exit(-5);
    }

    process_action.sa_handler=child_ends1();
    if(sigaction(SIGUSR2,&process_action,NULL)<0)
    {
     	perror("Error FIU 1 SIGUSR2\n");
        exit(-6);
    }
    for(int i=0;;i++)
	;
}

void child_handler1()
{
    c1++;
    printf("A fost contorizat un nou fisier\n");
}


void child_ends1()
{
    printf("Au fost contorizate toate fisierele\n");  	
    exit(c2);
}

int copil2()
{
    memset(&process_action,0x00,sizeof(struct sigaction));
    process_action.sa_handler=child_handler2;
    if(sigaction(SIGUSR1,&process_action,NULL)<0)
    {
        perror("Error FIU 2 SIGUSR1\n");
        exit(-7);
    }

    process_action.sa_handler=child_ends2();
    if(sigaction(SIGUSR2,&process_action,NULL)<0)
    {
        perror("Error FIU 2 SIGUSER2\n");
        exit(-11);
    }
    for(int i=0;;i++)
	;
}

void child_handler2()
{
    c2++;
    printf("A fost contorizat un nou director\n");	
}

void child_ends2()
{
  printf("Au fost contorizate toate directoarele\n");    	
    exit(c2);
}

int parinte()
{

    for(int i=2; i<argc; i++)
    {
        if(stat(argv[i], &path_stat)<0)
	{
		prerror("Eroare la stat");
		exit(-9);
	}
	if(S_ISREG(path_stat.st_mode)>0)
        {
             if(!(kill(pid1,SIGUSR1)==0))
    	     {
        	perror("Eroare la kill fiul unu");
        	exit(-8);
    	     }
        }
        if(S_ISDIR(path_stat.st_mode)>0)
        {
             if(!(kill(pid2,SIGUSR1)==0))
    	     {
        	perror("Eroare la kill fiul doi");
        	exit(-10);
             }
        }

       struct sigaction process_action;
       memset(&process_action,0x00,sizeof(struct sigaction));

       process_action.sa_handler=parent_ends;
       if(sigaction(SIGCHLD,&process_action,NULL)<0)
       {
		k++;
		perror("Error SIGCHLD\n");
		exit(-1);
       }
    }
}

void parent_ends()
{
    if(path.st_nlink>n&&c1+c2!=0)
            {
                unlink("_link");
                if(symlink(argv[c1+c2], "_link"<0)
                {
                	perror("Erroare mylink");
                   	exit(2);
                }
            }	
 
    if(!(kill(pid1,SIGUSR2)==0))
    {
        perror("Eroare la kill fiul unu");
        exit(-12);
    }
    if(!(kill(pid2,SIGUSR2)==0))
    {
        perror("Eroare la kill fiul doi");
        exit(-13);
    }

    int status;
    if(wait(&status)<0)
    {
	prerror("Eroare la wait");
	exit(-14);
    }
    if(WIFEXITED(status)&&k=1)
    {
        printf("procesul copil nr 1 s-a incheiat cu codul %d\n",WEXITSTATUS(status));
    }
    if(WIFEXITED(status)&&k=2)
    {
        printf("procesul copil nr 2 s-a incheiat cu codul %d\n",WEXITSTATUS(status));
    }
    exit(0);
}

int main(int argc, char* argv[])
{


    if(argc<3)
    {
        printf("Argumente insuficiente");
        exit(-1);
    }

    if(stat(argv[1], &path_stat)<0)
    {
	prerror("Eroare stat");
	exit(-16);
    }
    if(S_ISDIR(path_stat.st_mode)<=0);
    {
        printf("Primul argument nu este un director");
        exit(-2);
    }

    if( ( pid1=fork() ) < 0)
    {
        perror("Eroare fork la fiul unu");
        exit(-3);
    }

    if(pid1==0)
    {
        copil1();
    }


    if( ( pid2=fork() ) < 0)
    {
        perror("Eroare fork la fiul doi");
        exit(-4);
    }

    if(pid2==0)
    {
        copil2();
    }

    if(pid1>0&&pid2>0)
    {
        parinte();
	parent_ends();
    }
}
