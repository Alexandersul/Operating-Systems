#include <stdio.h>
#include <stdlib.h>
#include <srtring.>
#include <sys/wait.h>
#include <unistd.h>
#include <fcntl.h>

//mai trebuie verificate unele erori

int main(int argc, char* argv[]){
	pid_t pid;	
	int des[2];
        char* buffer = (char*)calloc(20, sizeof(char));
	  if(!buffer) {
            printf("Memoria pentru buffer nu a fost alocata corespunzator\n");
            exit(-6);
        }

	if(argc < 2)
	{
		printf("Putine argumente\n");
		exit(-1);
	}
	
	if(pipe(inf) < 0)
	{
		prerror("pipe");
		exit(-5);
	}

	if(pid=fork()<0)
	{
		prerror("Eroare fork");
		exit(-2);
	}

	if(pid==0)
	{
		close(des[1]);
		int* v=(int*)calloc(20,sizeof(int));
		
		char* read1;

		
		read1 = read(des[0], (void*)buffer, sizeof(char)));
		
				
		for(int i=0;i<strlen[argv[1]];i++)
			if(read1[i]>'0'&&read1[i]<'9')
				v[i]=read1[i]-48;//transformare din ascii in int
		
		//exec bashul scris la A si redirectat ">" in des[0]
		free(buffer);
		int* p = malloc(sizeof(char));
		*p=read1;

		writer= write(des[0]+48,p,sizeof(int));//retransform in ascii
		exit(1);		
	}

	if(pid>0)
	{
		int fd=open(argv[1],O_RDONLY);
		if(fd<0)
		{
			prerror("Open");
			exit(-3);
		}	
		
		if(!buffer)
		{
			printf("buffer");
			exit(-4);
		}

		int reader,writer;
		
    		while((reader = read(fd,(void*)buffer, sizeof(char))) > 0)
			writer= write(des[1], bufer,reader);

		//de facut treaba cu pidul prin paren_handler
		char* read2;
		close(des[0]);
		read2 = read(des[1], (void*)buffer, sizeof(char)));
		
		printf("%s",read2);
		free(buffer);
   	 	close(fd);
    		close(des[1]);	
	}	
}